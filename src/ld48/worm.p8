pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
-- Pico-8 cartridge for LD48

-- Constants
DIR = {  -- Directions correspond to the numbers for the arrow buttons
  L = 0,
  R = 1,
  U = 2,
  D = 3
}

CLR = {
  back = 4,
  head = 14,
  body = 15,
  cavity = 0
}

SFX = {
  hit = 0,
  collide = 1,
  eat = 2
}

-- SPECIAL GAME CALLBACKS --
function _init()
  worm = {
    x = 0,  -- The exact location. prev_x/y only save integer values
    y = 0,
    dir = DIR.R,
    length = 20,
    speed = 0.65,
    prev_x = {0},
    prev_y = {0},
    invincible = 0
  }

  fx = {
    flash_red = 0
  }

  level = {
    food = {},
    fire = {},
    cavities = {}
  }

  init_level()
end

function _update()
  -- Misc Updates
  if worm.invincible > 0 then
    worm.invincible -= 1
  end

  if fx.flash_red > 0 then
    fx.flash_red -= 1
  end

  update_worm_dir()

  update_cavities()

  move_worm()

  handle_self_collision()

  handle_level_collision()

end

function _draw()
  -- Clear the screen
  rectfill(0,0,128,128,CLR.back)

  map(0,0,0,0,16,16,0x2)

  -- Draw cavities
  for x=1,128 do
    for y=1,128 do
      if level.cavities[x][y] then
        pset(x, y, CLR.cavity)
      end
    end
  end


  map(0,0,0,0,16,16,0x4)

  -- Draw worm head
  local int_x = flr(worm.x) -- We floor our 
  local int_y = flr(worm.y)
  rectfill(int_x,int_y,int_x, int_y,CLR.head)
  -- Draw worm body, index 1 is head
  for i=2,worm.length do
    local x = worm.prev_x[i]
    local y = worm.prev_y[i]
    if x != nil and y != nil then
      rectfill(x,y,x, y,CLR.body)
    end
  end

  -- Special effects
  if fx.flash_red > 0 then
    if (fx.flash_red / 2) % 2 == 1 then
      rectfill(0,0,128,128,8)
    end
  end

  -- Draw length
  print("lENGTH: "..worm.length, 24, 4)

end
-----

function init_level()
  for x=1,128 do
    level.food[x] = {}
    level.fire[x] = {}
    level.cavities[x] = {}
    for y=1,128 do
      -- First set boolean vals
      level.food[x][y] = false
      level.fire[x][y] = false
      level.cavities[x][y] = false
      -- Get pixel coordinates
      local pix_x = x-1
      local pix_y = y-1
      local sprite_num = mget(flr(pix_x / 8), flr(pix_y / 8))
      -- Determine cell location on the sprite sheet
      local ss_cell_x = sprite_num % 16
      local ss_cell_y = flr(sprite_num / 16)
      -- Determine sprite sheet location
      local ss_x = ss_cell_x * 8 + pix_x % 8
      local ss_y = ss_cell_y * 8 + pix_y % 8
      local color = sget(ss_x, ss_y)
      -- Determine type of pixel based on color
      if color == 3 or color == 11 then -- Greens
        level.food[x][y] = true
      elseif color == 8 or color == 9 or color == 10 then -- red, orange yellow
        level.fire[x][y] = true
      end
    end
  end  
end

function update_cavities()
  local x = worm.prev_x[worm.length]
  local y = worm.prev_y[worm.length]
  if x != nil and y != nil and level.cavities[x] != nil then
    level.cavities[x][y] = true
  end
end

function move_worm()
  local dx = 0
  local dy = 0
  if worm.dir == DIR.R then
    dx = 1
  elseif worm.dir == DIR.U then
    dy = -1
  elseif worm.dir == DIR.L then
    dx = -1
  elseif worm.dir == DIR.D then
    dy = 1
  end
  -- Adjust according to speed
  dx *= worm.speed
  dy *= worm.speed

  -- Update worm head position
  worm.x += dx
  worm.y += dy

  -- prev_x/y should only save previous tiles, i.e. integer positions
  -- Therefore, we only update if we have an integer value change in x and y position
  -- If we were to use exact locations for prev_x/y the worm would get shorter if it moves slower, as subsequent positions would be at e.g. 0.5,1,1.5
  -- which would cause segments of the worm to overlap
  local int_x = flr(worm.x)
  local int_y = flr(worm.y)

  if int_x != worm.prev_x[1] or int_y != worm.prev_y[1] then -- Check that the previous floored head position is not equal to the new one, i.e. we moved completely into a new tile
    -- Update previous head positions
    -- Because the last element will be overwritten we start at the second to last element
    for i=worm.length-1,1,-1 do -- Go through elements from the back
      -- Make sure the index exists
      if worm.prev_x[i] != nil then
        -- Shift all elements back
        worm.prev_x[i+1] = worm.prev_x[i]
        worm.prev_y[i+1] = worm.prev_y[i]
      end
    end
    -- Set the head position to the first of the list
    worm.prev_x[1] = int_x
    worm.prev_y[1] = int_y
  end

end

function update_worm_dir()

  for dir=0,3 do
    if btn(dir) then
      if dir != opposite(worm.dir) then -- Prevent worm 180るぬ turn
        worm.dir = dir
        break
      end
    end
  end

  collision = handle_screen_collision()
if (collision) sfx(SFX.collide)

end

function opposite(dir)
  if (dir == 0) return 1
  if (dir == 1) return 0
  if (dir == 2) return 3
  if (dir == 3) return 2
end 

-- Handle collisions, return true if collision is detected
-- In case of a collision player input should be ignored
function handle_screen_collision()
  -- DETECT COLLISIONS
  -- Collisions are handled by changing the direction clockwise, unless the opposite arrow butt ins pressed
  -- Left and right side collision
  if worm.dir == DIR.L then
    if worm.prev_x[1] - 1 < 0 then -- Check exact position
      -- worm.x = 0
      if btn(DIR.D) then
        worm.dir = DIR.D
        return false -- Does not count as actual collision (for sound's sake) because player chose direction
      elseif btn(DIR.U) then
        worm.dir = DIR.U
        return false -- As above
      else 
        worm.dir = DIR.U
        return true
      end
    end
  elseif worm.dir == DIR.R then
    if worm.prev_x[1] + 1 > 127 then -- TODO: better alternative?
      -- worm.x = 127
      if btn(DIR.U) then
        worm.dir = DIR.U
        return false -- See above
      elseif btn(DIR.D) then
        worm.dir = DIR.D
        return false
      else 
        worm.dir = DIR.D
        return true
      end
    end
  end

  return false
end

function handle_self_collision()
  if (worm.invincible > 0) return
  
  for i=2,worm.length do
    -- prev_x/y[1] is position of head
    if worm.prev_x[i] == worm.prev_x[1] and worm.prev_y[i] == worm.prev_y[1] then
      sfx(SFX.hit)
      worm.length -= 1 -- TODO: check for death
      worm.invincible = 20 -- Grant short term invincibility, mostly to prevent more than one damage from self collisions
      fx.flash_red = 10 -- Flash screen red
      break
    end
  end
end

function handle_level_collision()
  -- Convert integer worm position into indices
  local x = worm.prev_x[1] + 1
  local y = worm.prev_y[1] + 1

  if level.food[x] != nil and level.food[x][y] then
    sfx(SFX.eat)
    worm.length += 1
    level.food[x][y] = false -- Food eaten
  end  
end

__gfx__
000000000000000b15d5500000000000000555510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000115150000000000000005d550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000b00000001555000000000000000005510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000003000b005150000000000000000005510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000001550000000000000000005150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000bd150000000000000000055550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000003000d1550000000000000005d5510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000005515500000000000000551550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000888880000088000000000888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00008888888800888800000008899880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000888999988888898800000889aa988000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888999998889999980000089aaaa98000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0888999aa99899aaa980000089aaaa98000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
088999aaaa999aaaa9880000889aa988000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0889aa9aaaa99aaaa999880008899880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8899aaaaaaaaaaaaaaaa998800888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8899aaaaaaaa9aaaaaaa998800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0898999aaaaaaa9aa9aa998000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08999a9aaa9aaaaaaa9a980000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0898999aaa9aaaaaaa9a980000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08899a9aaaa9a9aaaaa9988800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
088999aa9aa9989aaaa9989800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88999aaaaaaa99aaa9aa998800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8899aaaaaaaaaaaaaaaa998800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8899aaaaaa999aaaaaaa998800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
889a9aaaa9aa9aaaaaaa988000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8899aaaaaaaaaaaaa9a9980000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8899a99aaa9999a9aa99988000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08889999999888999999988800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08888899998808899999880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888888880000088888980000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000888800000088008880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0002020002000000000000000000000004040404000000000000000000000000040404040000000000000000000000000404040400000000000000000000000004040404000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0200000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200130000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000100000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000013000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111111200000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212112001012000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3131212121112132000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200303121213200000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000120220000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0210111121320000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0230313132000000000013000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000001301130000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000013130000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111111111111200101111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000c00002663019650146200c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000e05019000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000002f55034550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
