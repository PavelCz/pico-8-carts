pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
-- Pico-8 cartridge for LD48

-- Constants
DIR = {  -- Directions correspond to the numbers for the arrow buttons
  L = 0,
  R = 1,
  U = 2,
  D = 3
}

CLR = {
  back = 4,
  head = 14,
  body = 15,
  cavity = 1
}

SFX = {
  hit = 0,
  collide = 1,
  eat = 2
}

level_text = {
  -- Level 1
  {
    {x = 8, y = 18, text = "food = growth\navoid hitting the tail"},
    {x = 16, y = 40, text = "wormy leaves cavities"},
    {x = 6, y = 60, text = "wormy will fall in cavities"}
  }
}

levels = {
  {start_x = 5, start_y = 0, origin_x = 0, origin_y = 0, exit = DIR.D},
  {start_x = 5, start_y = 0, origin_x = 0, origin_y = 128, exit = DIR.D},
  {start_x = 5, start_y = 0, origin_x = 128 * 2, origin_y = 0, exit = DIR.D},
}

-- SPECIAL GAME CALLBACKS --
function _init()
  worm = {
    x = 5,  -- The exact location. prev_x/y only save integer values
    y = 0,
    dir = DIR.R,
    length = 10,
    speed = 0.5,
    prev_x = {5},
    prev_y = {0},
    invincible = 0,
    airtime = 0
  }

  fx = {
    flash_red = 0
  }

  current_level = {
    number = 1,
    food = {},
    fire = {},
    cavities = {}
  }

  digging_sound = false

  init_level()
end

function _update()
  -- Misc Updates
  if worm.invincible > 0 then
    worm.invincible -= 1
  end

  if fx.flash_red > 0 then
    fx.flash_red -= 1
  end

  if not digging_sound and worm.airtime < 1 then
    digging_sound = true -- Toggle flag
    music(0, 200, 0x04) -- Start diggin sound "music"
  elseif digging_sound and worm.airtime >= 4 then
    digging_sound = false
    music(1, 500, 0x04)
  end

  update_worm_dir()

  update_cavities()

  move_worm()

  handle_self_collision()

  handle_level_collision()

end

function _draw()

  local orig_x = levels[current_level.number].origin_x
  local orig_y = levels[current_level.number].origin_y
  local column_x = orig_x / 8
  local column_y = orig_y / 8

  -- Clear the screen
  rectfill(0,0,128,128,CLR.back)

  map(column_x,column_y,0,0,16,16,0x2)

  -- Draw special level texts
  for text in all(level_text[current_level.number]) do
    local text_colour = 15
    print(text.text, text.x, text.y, text_colour)
  end

  -- Draw cavities
  for x=1,128 do
    for y=1,128 do
      if current_level.cavities[x][y] then
        pset(x-1, y-1, CLR.cavity)
      end
    end
  end


  map(column_x,column_y,0,0,16,16,0x4)

  map(column_x,column_y,0,0,16,16,0x40)

  -- Draw worm head
  local int_x = flr(worm.x) -- We floor our 
  local int_y = flr(worm.y)
  rectfill(int_x,int_y,int_x, int_y,CLR.head)
  -- Draw worm body, index 1 is head
  for i=2,worm.length do
    local x = worm.prev_x[i]
    local y = worm.prev_y[i]
    if x != nil and y != nil then
      rectfill(x,y,x, y,CLR.body)
    end
  end

  -- Special effects
  if fx.flash_red > 0 then
    if (fx.flash_red / 4) % 2 == 1 then
      rectfill(0,0,128,128,8)
    end
  end

  -- Draw length
  print("lENGTH: "..worm.length, 80, 0)

end
-----

function init_level()
  for x=1,128 do
    current_level.food[x] = {}
    current_level.fire[x] = {}
    current_level.cavities[x] = {}
    for y=1,128 do
      -- First set boolean vals
      current_level.food[x][y] = false
      current_level.fire[x][y] = false
      current_level.cavities[x][y] = false
    
      -- Get current origin
      local orig_x = levels[current_level.number].origin_x
      local orig_y = levels[current_level.number].origin_y
      -- TODO: seperate between sprites with a game effect and purely decorative sprites based on flags
      -- Get pixel coordinates
      local pix_x = orig_x + x-1
      local pix_y = orig_y + y-1
      local sprite_num = mget(flr(pix_x / 8), flr(pix_y / 8))
      -- Determine cell location on the sprite sheet
      local ss_cell_x = sprite_num % 16
      local ss_cell_y = flr(sprite_num / 16)
      -- Determine sprite sheet location
      local ss_x = ss_cell_x * 8 + pix_x % 8
      local ss_y = ss_cell_y * 8 + pix_y % 8
      local color = sget(ss_x, ss_y)
      -- Determine type of pixel based on color
      if color == 3 or color == 11 then -- Greens
        current_level.food[x][y] = true
      elseif color == 8 or color == 9 or color == 10 then -- red, orange yellow
        current_level.fire[x][y] = true
      elseif color == 1 or color == 5 then
        current_level.cavities[x][y] = true
      end
    end
  end  
end

function update_cavities()
  local x = worm.prev_x[worm.length]
  local y = worm.prev_y[worm.length]
  if x != nil and y != nil and current_level.cavities[x] != nil then
    current_level.cavities[x+1][y+1] = true
  end
  -- Doing this also for the second to last body part prevents gaps in case the length gets reduced
  local x = worm.prev_x[worm.length-1]
  local y = worm.prev_y[worm.length-1]
  if x != nil and y != nil and current_level.cavities[x] != nil then
    current_level.cavities[x+1][y+1] = true
  end
end

function move_worm()
  local dx = 0
  local dy = 0
  if worm.dir == DIR.R then
    dx = 1
  elseif worm.dir == DIR.U then
    dy = -1
  elseif worm.dir == DIR.L then
    dx = -1
  elseif worm.dir == DIR.D then
    dy = 1
  end
  -- Adjust according to speed
  dx *= worm.speed
  dy *= worm.speed

  -- Update worm head position
  worm.x += dx
  worm.y += dy

  -- prev_x/y should only save previous tiles, i.e. integer positions
  -- Therefore, we only update if we have an integer value change in x and y position
  -- If we were to use exact locations for prev_x/y the worm would get shorter if it moves slower, as subsequent positions would be at e.g. 0.5,1,1.5
  -- which would cause segments of the worm to overlap
  local int_x = flr(worm.x)
  local int_y = flr(worm.y)

  if int_x != worm.prev_x[1] or int_y != worm.prev_y[1] then -- Check that the previous floored head position is not equal to the new one, i.e. we moved completely into a new tile
    -- Update previous head positions
    -- Because the last element will be overwritten we start at the second to last element
    for i=worm.length-1,1,-1 do -- Go through elements from the back
      -- Make sure the index exists
      if worm.prev_x[i] != nil then
        -- Shift all elements back
        worm.prev_x[i+1] = worm.prev_x[i]
        worm.prev_y[i+1] = worm.prev_y[i]
      end
    end
    -- Set the head position to the first of the list
    worm.prev_x[1] = int_x
    worm.prev_y[1] = int_y
  end

end

function update_worm_dir()
  if worm.airtime <= 0 then
    for dir=0,3 do
      if btn(dir) then
        if dir != opposite(worm.dir) then -- Prevent worm 180るぬ turn
          worm.dir = dir
          break
        end
      end
    end
  end

  collision = handle_screen_collision()
  if (collision) sfx(SFX.collide)

end

function opposite(dir)
  if (dir == 0) return 1
  if (dir == 1) return 0
  if (dir == 2) return 3
  if (dir == 3) return 2
end 

-- Handle collisions, return true if collision is detected
-- In case of a collision player input should be ignored
function handle_screen_collision()
  -- DETECT COLLISIONS
  -- Collisions are handled by changing the direction clockwise, unless the opposite arrow butt ins pressed
  -- Left and right side collision
  if worm.dir == DIR.L then
    if worm.prev_x[1] - 1 < 0 then -- Check pixel position
      if levels[current_level.number].exit == DIR.L then -- This side is the exit
        next_level()
        return false
      end
      if worm.airtime > 1 then
        worm.dir = DIR.D
        return true
      elseif btn(DIR.D) then
        worm.dir = DIR.D
        return false -- Does not count as actual collision (for sound's sake) because player chose direction
      elseif btn(DIR.U) then
        worm.dir = DIR.U
        return false -- As above
      else 
        worm.dir = DIR.U
        return true
      end
    end
  elseif worm.dir == DIR.R then
    if worm.prev_x[1] + 1 > 127 then -- TODO: better alternative?
      if levels[current_level.number].exit == DIR.R then -- This side is the exit
        next_level()
        return false
      elseif worm.airtime > 1 then
        worm.dir = DIR.D
        return true
      elseif btn(DIR.U) then
        worm.dir = DIR.U
        return false -- See above
      elseif btn(DIR.D) then
        worm.dir = DIR.D
        return false
      else 
        worm.dir = DIR.D
        return true
      end
    end
  elseif worm.dir == DIR.D then
    if worm.prev_y[1] + 1 > 127 then -- TODO: better alternative?
      if levels[current_level.number].exit == DIR.D then -- This side is the exit
        next_level()
        return false
      elseif worm.airtime > 1 then
        worm.dir = DIR.R
        return true
      elseif btn(DIR.R) then
        worm.dir = DIR.R
        return false -- See above
      elseif btn(DIR.L) then
        worm.dir = DIR.L
        return false
      else 
        worm.dir = DIR.R
        return true
      end
    end
  end

  return false
end

function handle_self_collision()
  if (worm.invincible > 0) return
  
  for i=2,worm.length do
    -- prev_x/y[1] is position of head
    if worm.prev_x[i] == worm.prev_x[1] and worm.prev_y[i] == worm.prev_y[1] then
      sfx(SFX.hit)
      worm.length -= 1 -- TODO: check for death
      worm.invincible = 20 -- Grant short term invincibility, mostly to prevent more than one damage from self collisions
      fx.flash_red = 20 -- Flash screen red
      break
    end
  end
end

function handle_level_collision()
  -- Convert integer worm position into indices
  local x = worm.prev_x[1] + 1
  local y = worm.prev_y[1] + 1

  if current_level.food[x] != nil then
    if current_level.food[x][y] then
      sfx(SFX.eat)
      worm.length += 1
      current_level.food[x][y] = false -- Food eaten
    elseif current_level.fire[x][y] then
      if worm.invincible <= 0 then
        sfx(SFX.hit)
        worm.length -= 1
        worm.invincible = 20
        fx.flash_red = 20
      end
    elseif current_level.cavities[x][y] then -- There will never be a cavity under fire
      worm.airtime += worm.speed -- With airtime we don't count the number of frames we were in the air, but the number of pixels
      -- The number of pixels the worm will fly horizontally before droppting, based on the speed
      local horizontal_duration = ceil(8 * worm.speed) -- TODO: floor or ceil?
      if flr(worm.airtime) > 0 and flr(worm.airtime) % horizontal_duration == 0 then
        local fall_dist = worm.airtime / horizontal_duration -- The longer we are in the air, the longer we will fall
        worm.y += fall_dist
        worm.prev_y[1] += fall_dist
        -- In the case we are going upwards we grant short invincibility and turn around the worm, such that going up a hole will not cause extreme amounts of damage
        if worm.dir == DIR.U then
          worm.dir = DIR.D
          worm.invincible = 15
        end
        -- TODO: make it so that falling down quickly doesn't cause gaps in the worm by pulling the tail with the
      end
    else -- Not in cavities
      worm.airtime = 0
    end
  end  
end

function next_level()
  current_level.number += 1

  digging_sound = false

  -- Reset worm
  worm.x = levels[current_level.number].start_x
  worm.y = levels[current_level.number].start_y
  worm.prev_x = {worm.x}
  worm.prev_y = {worm.y}
  worm.dir = DIR.D
  worm.airtime = 0
  worm.invincible = 0

  -- Set new camera position
  -- camera(levels[current_level.number].origin_x, levels[current_level.number].origin_y)

  init_level()
  
end

__gfx__
00000000000000b015d5500000000000000555510000000110000001100000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000115550000000000000005d550000001111100111110000000000000000000000000000000000000000000000000000000000000000000000
000000000000000b1555000000000000000005510000011111111111110000000000000000000000000000000000000000000000000000000000000000000000
000000003000b0005150000000000000000005510001111111111111111000000000000000000000000000000000000000000000000000000000000000000000
00000000000000001550000000000000000005150001111511111115111100000000000000000000000000000000000000000000000000000000000000000000
00000000000000b0d150000000000000000055550011111151111111111110000000000000000000000000000000000000000000000000000000000000000000
0000000000030000d155000000000000000555510015111111115111111111100000000000000000000000000000000000000000000000000000000000000000
00000000000000005515500000000000000551551111115111151111511111110000000000000000000000000000000000000000000000000000000000000000
00000888880000088000000000888800000000001111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
00008888888800888800000008899880000000000151111111111111111111100000000000000000000000000000000000000000000000000000000000000000
000888999988888898800000889aa988000000000111111111111111151111100000000000000000000000000000000000000000000000000000000000000000
00888999998889999980000089aaaa98000000000111115111111111115111100000000000000000000000000000000000000000000000000000000000000000
0888999aa99899aaa980000089aaaa98000000000111511111111111111111110000000000000000000000000000000000000000000000000000000000000000
088999aaaa999aaaa9880000889aa988000000000111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
0889aa9aaaa99aaaa999880008899880000000001111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
8899aaaaaaaaaaaaaaaa998800888800000000001111511111111111111111110000000000000000000000000000000000000000000000000000000000000000
8899aaaaaaaa9aaaaaaa998800000000000000001111151111111111511111110000000000000000000000000000000000000000000000000000000000000000
0898999aaaaaaa9aa9aa998000000000000000001111111111511111111111000000000000000000000000000000000000000000000000000000000000000000
08999a9aaa9aaaaaaa9a980000000000000000000111111111111111511100000000000000000000000000000000000000000000000000000000000000000000
0898999aaa9aaaaaaa9a980000000000000000000111111111115111111000000000000000000000000000000000000000000000000000000000000000000000
08899a9aaaa9a9aaaaa9988800000000000000000111151111111111110000000000000000000000000000000000000000000000000000000000000000000000
088999aa9aa9989aaaa9989800000000000000000011111111111111110000000000000000000000000000000000000000000000000000000000000000000000
88999aaaaaaa99aaa9aa998800000000000000000011111111111111100000000000000000000000000000000000000000000000000000000000000000000000
8899aaaaaaaaaaaaaaaa998800000000000000000000111110101101100000000000000000000000000000000000000000000000000000000000000000000000
8899aaaaaa999aaaaaaa998800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
889a9aaaa9aa9aaaaaaa988000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8899aaaaaaaaaaaaa9a9980000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8899a99aaa9999a9aa99988000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08889999999888999999988800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08888899998808899999880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888888880000088888980000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000888800000088008880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0002040004040404000000000000000040404040000404040000000000000000404040040004040400000000000000004040400400000000000000000000000004040404000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0200000000000000000000000000000402000000000000000000000000000004020000000000000000000000000000040200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000100000000000000000001010402001300000000000000000000000004020013000000000000000000000000040200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000402000001000000000000000000000004020000010000000000000000000000040200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000402000000000000000000000000000004020000001300000000000000000000040200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000402000000000000000000000000000004020000000000000000000000000000040200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000402000000000000000000000000000004111111120000000000000000000000041100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000100000000000000000000000402000000000000000000000000000004212121211200101200000000000000042100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000402000000000000000000000000000004313121212111213200000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000402000000000000000000000000000004020030312121320000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200050607000507000000000000000502000001000000000000000000000004020000012022000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0606161616061616070000000005061602000000000000000000000000000004021011112132000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2626261616161616160606060616161602000000000000000000000000000004023031313200000000001300000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200002516161616162616161616162602000000000000000000000000000004020000000000000000130113000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000025262626270025262626270402000000000000000000000000000004020000000000000000001313000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000402000000000000000000000000000004020000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000050606070000000000000402000000000000000000000000000004111111111111120010111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000151616170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000251616160700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000002516161607000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000015161616070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000015161616170000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000025261616160700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000001516161607000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000001516161616060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000001516161616161600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000001516161616161600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000002526262626161600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000151600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000251600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000001500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000001500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0211111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
010c00002663019650146200c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000e05019000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000002f55034550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
901e0006036100d6100561010610066100c6100000000000000000000000000000000000015600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
b610000014720137201272011720107200f7200e7200d7200c7200b7200a720097200872007720067200572004720037200272001720007200070000000000000000000000000000000000000000000000000000
__music__
00 03424344
00 04424344

